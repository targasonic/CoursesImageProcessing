# Устойчивый цветной автоконтраст

# Прочитайте цветное изображение из файла img.png. Примените к нему устойчивый автоконтраст. Для этого:
# 1. Переведите изображение в вещественные числа от 0 до 1.
# 2. Переведите изображение в пространство YUV по формулам:

# YUV=  0.2126⋅R+0.7152⋅G+0.0722⋅B=−0.0999⋅R−0.3360⋅G+0.4360⋅B=  0.6150⋅R−0.5586⋅G−0.0563⋅B
# 3. Найдите максимум и минимум для устойчивого автоконтраста с отбрасыванием 5% самых светлых и 5% самых темных пикселей.
# 4. Примените линейное растяжение канала Y по формуле

# f(x)=(x−xmin)⋅255xmax−xmin
# 5. Обрежьте значения канала Y от 0 до 1.
# 6. Переведите изображение в пространство RGB по формулам:

# RGB=Y+1.2803⋅V=Y−0.2148⋅U−0.3805⋅V=Y+2.1279⋅U
# 7. Обрежьте значения изображения от 0 до 1.
# 8. Переведите изображение в целые числа от 0 до 255.

# Результат сохраните в файл out_img.png.

from skimage.io import imread, imsave, imshow
from skimage    import img_as_float
from skimage    import img_as_ubyte
from numpy      import array_equal
from numpy      import clip as np_clip, sort as np_sort
from numpy      import dstack

#1 Load RAW file
img = imread('img.png')

# 1 Переведите изображение в вещественные числа от 0 до 1.
img_f = img_as_float(img)

# 2. Переведите изображение в пространство YUV по формулам:
img_y =  0.2126*img_f[:, :, 0] + 0.7152*img_f[:, :, 1] + 0.0722*img_f[:, :, 2]
img_u = -0.0999*img_f[:, :, 0] - 0.3360*img_f[:, :, 1] + 0.4360*img_f[:, :, 2]
img_v =  0.6150*img_f[:, :, 0] - 0.5586*img_f[:, :, 1] - 0.0563*img_f[:, :, 2]

# 3. Найдите максимум и минимум для устойчивого автоконтраста 
# с отбрасыванием 5% самых светлых и 5% самых темных пикселей.
img_sort_list = np_sort(img_y, axis=None)
k = round(img_sort_list.size*0.05)
x_min, x_max = img_sort_list[k], img_sort_list [-k - 1]

# 4. Примените линейное растяжение канала Y по формуле
# 5. Обрежьте значения канала Y от 0 до 1.
img_y = np_clip((img_y - x_min)/(x_max - x_min), 0 , 1)

# 6. Переведите изображение в пространство RGB по формулам:
# 7. Обрежьте значения изображения от 0 до 1.
img_r = np_clip(img_y + 1.2803*img_v, 0 , 1)
img_g = np_clip(img_y - 0.2148*img_u - 0.3805*img_v, 0 , 1)
img_b = np_clip(img_y + 2.1279*img_u, 0 , 1)

# 8. Переведите изображение в целые числа от 0 до 255.
img_combined = img_as_ubyte (dstack ((img_r , img_g, img_b)))

# Результат сохраните в файл out_img.png.
imsave ('out_img.png', img_combined)
